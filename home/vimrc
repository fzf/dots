if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.local/share/nvim/plugged')

Plug 'autozimu/LanguageClient-neovim', {'branch': 'next', 'do': 'bash install.sh'}

if has('nvim')
  Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
else
  Plug 'Shougo/deoplete.nvim'
  Plug 'roxma/nvim-yarp'
  Plug 'roxma/vim-hug-neovim-rpc'
endif

Plug 'airblade/vim-gitgutter'
Plug 'ap/vim-buftabline'
Plug 'chriskempson/tomorrow-theme', { 'rtp': 'vim' }
Plug 'chriskempson/vim-tomorrow-theme'
Plug 'ddrscott/vim-side-search'
Plug 'dyng/ctrlsf.vim'
Plug 'dyng/ctrlsf.vim'
Plug 'ervandew/supertab'
Plug 'eugen0329/vim-esearch'
Plug 'iberianpig/tig-explorer.vim'
Plug 'ivalkeen/nerdtree-execute'
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
Plug 'ntpeters/vim-better-whitespace'
Plug 'qpkorr/vim-bufkill'
Plug 'rbgrouleff/bclose.vim'
Plug 'scrooloose/nerdcommenter'
Plug 'scrooloose/nerdtree'
Plug 'shumphrey/fugitive-gitlab.vim'
Plug 'takkii/Bignyanco'
Plug 'thoughtbot/vim-rspec'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-rhubarb'
Plug 'vim-ruby/vim-ruby'
Plug 'wakatime/vim-wakatime'
Plug 'wsdjeg/vim-fetch'

call plug#end()

set hidden

let mapleader = ","
let g:LanguageClient_serverCommands = { 'ruby': ['~/.rbenv/shims/solargraph', 'stdio'] }

autocmd BufLeave,FocusLost,VimResized * silent! wall

no d h
no D H
no h j
no H J
no t k
no T K
no n l
no N L

no j d
no J D
no k t
no K T
no l n
no L N

" nnoremap <C-D> <C-W><C-H>
" nnoremap <C-H> <C-W><C-J>
" nnoremap <C-T> <C-W><C-K>
" nnoremap <C-N> <C-W><C-L>
" nnoremap <C-w>d <C-w>h
" nnoremap <C-w>h <C-w>j
" nnoremap <C-w>t <C-w>k
" nnoremap <C-w>n <C-w>l
nnoremap <C-n> :bnext<CR>
nnoremap <C-d> :bprev<CR>

colorscheme Tomorrow-Night-Eighties

let NERDTreeMapOpenInTab='\t'
let g:better_whitespace_enabled=1
let g:strip_whitespace_on_save=1

syntax enable
syntax on
filetype plugin indent on

set autoread
set clipboard=unnamed
set encoding=utf-8
set expandtab
set mouse=a
set nocompatible
set nohlsearch
set noswapfile
set number
set showcmd
set tabstop=2 shiftwidth=2

if executable('ag')
  let g:ackprg = 'ag --vimgrep'
endif
map <C-_> :Ag<CR>
map <C-P> :FZF<CR>
map <C-x> :!pbcopy<CR>
map <C-c> :w !pbcopy<CR><CR>
map <leader>x :BD<CR>

let g:esearch = {
  \ 'out': 'qflist' }
let g:fzf_action = {
  \ 'ctrl-c': 'tab split',
  \ 'ctrl-n': 'split',
  \ 'ctrl-v': 'vsplit' }
let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'border':  ['fg', 'Ignore'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }
