if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.local/share/nvim/plugged')

Plug 'autozimu/LanguageClient-neovim', {'branch': 'next', 'do': 'bash install.sh'}

if has('nvim')
  Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
else
  Plug 'Shougo/deoplete.nvim'
  Plug 'roxma/nvim-yarp'
  Plug 'roxma/vim-hug-neovim-rpc'
endif

Plug 'airblade/vim-gitgutter'
Plug 'ap/vim-buftabline'
Plug 'chriskempson/tomorrow-theme', { 'rtp': 'vim' }
Plug 'chriskempson/vim-tomorrow-theme'
Plug 'christoomey/vim-tmux-navigator'
Plug 'ddrscott/vim-side-search'
Plug 'dyng/ctrlsf.vim'
Plug 'eugen0329/vim-esearch'
Plug 'iberianpig/tig-explorer.vim'
Plug 'ivalkeen/nerdtree-execute'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'ntpeters/vim-better-whitespace'
Plug 'qpkorr/vim-bufkill'
Plug 'rbgrouleff/bclose.vim'
Plug 'scrooloose/nerdcommenter'
Plug 'scrooloose/nerdtree'
Plug 'shumphrey/fugitive-gitlab.vim'
Plug 'takkii/Bignyanco'
Plug 'thoughtbot/vim-rspec'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-rhubarb'
Plug 'vim-ruby/vim-ruby'
Plug 'wakatime/vim-wakatime'
Plug 'wsdjeg/vim-fetch'

call plug#end()

set hidden

let mapleader = ","
let g:LanguageClient_serverCommands = { 'ruby': ['~/.rbenv/shims/solargraph', 'stdio'] }
let g:coc_global_extensions = ['coc-lists', 'coc-solargraph', 'coc-highlight', 'coc-explorer', 'coc-git']

autocmd BufLeave,FocusLost,VimResized * silent! wall

no d h
no D H
no h j
no H J
no t k
no T K
no n l
no N L

no j d
no J D
no k t
no K T
no l n
no L N

" Minimalist-AutoCompletePop-Plugin
set completeopt=menu,menuone,noinsert
inoremap <expr> <CR> pumvisible() ? "\<C-Y>" : "\<CR>"
autocmd InsertCharPre * call AutoComplete()
fun! AutoComplete()
  if v:char =~ '\K'
    \ && getline('.')[col('.') - 4] !~ '\K'
    \ && getline('.')[col('.') - 3] =~ '\K'
    \ && getline('.')[col('.') - 2] =~ '\K' " last char
    \ && getline('.')[col('.') - 1] !~ '\K'

    call feedkeys("\<C-N>", 'n')
  end
endfun

" nnoremap <C-D> <C-W><C-H>
" nnoremap <C-H> <C-W><C-J>
" nnoremap <C-T> <C-W><C-K>
" nnoremap <C-N> <C-W><C-L>
" nnoremap <C-w>d <C-w>h
" nnoremap <C-w>h <C-w>j
" nnoremap <C-w>t <C-w>k
" nnoremap <C-w>n <C-w>l
nnoremap <leader>n :bnext<CR>
nnoremap <leader>d :bprev<CR>
nnoremap <C-w>v <C-w>s
nnoremap <C-w>s <C-w>v

let g:tmux_navigator_no_mappings = 1
let g:tmux_navigator_save_on_switch = 1
let g:tmux_navigator_disable_when_zoomed = 1

nnoremap <silent> <C-d> :TmuxNavigateLeft<cr>
nnoremap <silent> <C-h> :TmuxNavigateDown<cr>
nnoremap <silent> <C-t> :TmuxNavigateUp<cr>
nnoremap <silent> <C-n> :TmuxNavigateRight<cr>
nnoremap <silent> <C-\> :TmuxNavigatePrevious<cr>

colorscheme Tomorrow-Night-Eighties

let NERDTreeMapOpenInTab='\t'
let g:better_whitespace_enabled=1
let g:strip_whitespace_on_save=1

syntax enable
syntax on
filetype plugin indent on

set autoread
set clipboard=unnamed
set encoding=utf-8
set expandtab
set foldmethod=indent
set mouse=a
set nocompatible
set nohlsearch
set noswapfile
set number
set showcmd
set tabstop=2 shiftwidth=2
set listchars+=space:‚ê£
set list

" Keep all folds open when a file is opened
augroup OpenAllFoldsOnFileOpen
    autocmd!
    autocmd BufRead * normal zR
augroup END

if executable('ag')
  let g:ackprg = 'ag --vimgrep'
endif
map <C-_> :Ag<CR>
map <C-P> :CocList files<CR>
map <C-x> :!pbcopy<CR>
map <C-c> :w !pbcopy<CR><CR>
map <leader>x :BD<CR>

let g:esearch = {
  \ 'out': 'qflist' }

" Coc.nvim
set nobackup
set nowritebackup

" " You will have bad experience for diagnostic menuonessagesessages when it's
" default 4000.
set updatetime=300
"
" " don't give |ins-comompletion-menu| messages.
set shortmess+=c
"
" " always show signcolumns
set signcolumn=yes

"
" " Use tab for trigger completion with characters ahead and navigate.
" " Use command ':verbose imap <tab>' to make sure tab iberianpigs not mapped
" by other plugin.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
            \ <SID>check_back_space() ? "\<TAB>" :
                  \ coc#refresh()
                  inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

                  function! s:check_back_space() abort
                    let col = col('.') - 1
                      return !col || getline('.')[col - 1]  =~# '\s'
                      endfunction

                      " Use <c-spaceace> to trigger completion.
                      inoremap <silent><expr> <c-space> coc#refresh()

